{"ast":null,"code":"\"use strict\";\n\nmodule.exports = Field;\n\n// extends ReflectionObject\nvar ReflectionObject = require(\"./object\");\n((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = \"Field\";\nvar Enum = require(\"./enum\"),\n  types = require(\"./types\"),\n  util = require(\"./util\");\nvar Type; // cyclic\n\nvar ruleRe = /^required|optional|repeated$/;\n\n/**\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\n * @name Field\n * @classdesc Reflected message field.\n * @extends FieldBase\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {number} id Unique id within its namespace\n * @param {string} type Value type\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\n * @param {Object.<string,*>} [options] Declared options\n */\n\n/**\n * Constructs a field from a field descriptor.\n * @param {string} name Field name\n * @param {IField} json Field descriptor\n * @returns {Field} Created field\n * @throws {TypeError} If arguments are invalid\n */\nField.fromJSON = function fromJSON(name, json) {\n  var field = new Field(name, json.id, json.type, json.rule, json.extend, json.options, json.comment);\n  if (json.edition) field._edition = json.edition;\n  field._defaultEdition = \"proto3\"; // For backwards-compatibility.\n  return field;\n};\n\n/**\n * Not an actual constructor. Use {@link Field} instead.\n * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.\n * @exports FieldBase\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {number} id Unique id within its namespace\n * @param {string} type Value type\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] Comment associated with this field\n */\nfunction Field(name, id, type, rule, extend, options, comment) {\n  if (util.isObject(rule)) {\n    comment = extend;\n    options = rule;\n    rule = extend = undefined;\n  } else if (util.isObject(extend)) {\n    comment = options;\n    options = extend;\n    extend = undefined;\n  }\n  ReflectionObject.call(this, name, options);\n  if (!util.isInteger(id) || id < 0) throw TypeError(\"id must be a non-negative integer\");\n  if (!util.isString(type)) throw TypeError(\"type must be a string\");\n  if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase())) throw TypeError(\"rule must be a string rule\");\n  if (extend !== undefined && !util.isString(extend)) throw TypeError(\"extend must be a string\");\n\n  /**\n   * Field rule, if any.\n   * @type {string|undefined}\n   */\n  if (rule === \"proto3_optional\") {\n    rule = \"optional\";\n  }\n  this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\n\n  /**\n   * Field type.\n   * @type {string}\n   */\n  this.type = type; // toJSON\n\n  /**\n   * Unique field id.\n   * @type {number}\n   */\n  this.id = id; // toJSON, marker\n\n  /**\n   * Extended type if different from parent.\n   * @type {string|undefined}\n   */\n  this.extend = extend || undefined; // toJSON\n\n  /**\n   * Whether this field is repeated.\n   * @type {boolean}\n   */\n  this.repeated = rule === \"repeated\";\n\n  /**\n   * Whether this field is a map or not.\n   * @type {boolean}\n   */\n  this.map = false;\n\n  /**\n   * Message this field belongs to.\n   * @type {Type|null}\n   */\n  this.message = null;\n\n  /**\n   * OneOf this field belongs to, if any,\n   * @type {OneOf|null}\n   */\n  this.partOf = null;\n\n  /**\n   * The field type's default value.\n   * @type {*}\n   */\n  this.typeDefault = null;\n\n  /**\n   * The field's default value on prototypes.\n   * @type {*}\n   */\n  this.defaultValue = null;\n\n  /**\n   * Whether this field's value should be treated as a long.\n   * @type {boolean}\n   */\n  this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */false;\n\n  /**\n   * Whether this field's value is a buffer.\n   * @type {boolean}\n   */\n  this.bytes = type === \"bytes\";\n\n  /**\n   * Resolved type if not a basic type.\n   * @type {Type|Enum|null}\n   */\n  this.resolvedType = null;\n\n  /**\n   * Sister-field within the extended type if a declaring extension field.\n   * @type {Field|null}\n   */\n  this.extensionField = null;\n\n  /**\n   * Sister-field within the declaring namespace if an extended field.\n   * @type {Field|null}\n   */\n  this.declaringField = null;\n\n  /**\n   * Comment for this field.\n   * @type {string|null}\n   */\n  this.comment = comment;\n}\n\n/**\n * Determines whether this field is required.\n * @name Field#required\n * @type {boolean}\n * @readonly\n */\nObject.defineProperty(Field.prototype, \"required\", {\n  get: function () {\n    return this._features.field_presence === \"LEGACY_REQUIRED\";\n  }\n});\n\n/**\n * Determines whether this field is not required.\n * @name Field#optional\n * @type {boolean}\n * @readonly\n */\nObject.defineProperty(Field.prototype, \"optional\", {\n  get: function () {\n    return !this.required;\n  }\n});\n\n/**\n * Determines whether this field uses tag-delimited encoding.  In proto2 this\n * corresponded to group syntax.\n * @name Field#delimited\n * @type {boolean}\n * @readonly\n */\nObject.defineProperty(Field.prototype, \"delimited\", {\n  get: function () {\n    return this.resolvedType instanceof Type && this._features.message_encoding === \"DELIMITED\";\n  }\n});\n\n/**\n * Determines whether this field is packed. Only relevant when repeated.\n * @name Field#packed\n * @type {boolean}\n * @readonly\n */\nObject.defineProperty(Field.prototype, \"packed\", {\n  get: function () {\n    return this._features.repeated_field_encoding === \"PACKED\";\n  }\n});\n\n/**\n * Determines whether this field tracks presence.\n * @name Field#hasPresence\n * @type {boolean}\n * @readonly\n */\nObject.defineProperty(Field.prototype, \"hasPresence\", {\n  get: function () {\n    if (this.repeated || this.map) {\n      return false;\n    }\n    return this.partOf ||\n    // oneofs\n    this.declaringField || this.extensionField ||\n    // extensions\n    this._features.field_presence !== \"IMPLICIT\";\n  }\n});\n\n/**\n * @override\n */\nField.prototype.setOption = function setOption(name, value, ifNotSet) {\n  return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\n};\n\n/**\n * Field descriptor.\n * @interface IField\n * @property {string} [rule=\"optional\"] Field rule\n * @property {string} type Field type\n * @property {number} id Field id\n * @property {Object.<string,*>} [options] Field options\n */\n\n/**\n * Extension field descriptor.\n * @interface IExtensionField\n * @extends IField\n * @property {string} extend Extended type\n */\n\n/**\n * Converts this field to a field descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IField} Field descriptor\n */\nField.prototype.toJSON = function toJSON(toJSONOptions) {\n  var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n  return util.toObject([\"edition\", this._editionToJSON(), \"rule\", this.rule !== \"optional\" && this.rule || undefined, \"type\", this.type, \"id\", this.id, \"extend\", this.extend, \"options\", this.options, \"comment\", keepComments ? this.comment : undefined]);\n};\n\n/**\n * Resolves this field's type references.\n * @returns {Field} `this`\n * @throws {Error} If any reference cannot be resolved\n */\nField.prototype.resolve = function resolve() {\n  if (this.resolved) return this;\n  if ((this.typeDefault = types.defaults[this.type]) === undefined) {\n    // if not a basic type, resolve it\n    this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);\n    if (this.resolvedType instanceof Type) this.typeDefault = null;else\n      // instanceof Enum\n      this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\n  } else if (this.options && this.options.proto3_optional) {\n    // proto3 scalar value marked optional; should default to null\n    this.typeDefault = null;\n  }\n\n  // use explicitly set default value if present\n  if (this.options && this.options[\"default\"] != null) {\n    this.typeDefault = this.options[\"default\"];\n    if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\") this.typeDefault = this.resolvedType.values[this.typeDefault];\n  }\n\n  // remove unnecessary options\n  if (this.options) {\n    if (this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum)) delete this.options.packed;\n    if (!Object.keys(this.options).length) this.options = undefined;\n  }\n\n  // convert to internal data type if necesssary\n  if (this.long) {\n    this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\n\n    /* istanbul ignore else */\n    if (Object.freeze) Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\n  } else if (this.bytes && typeof this.typeDefault === \"string\") {\n    var buf;\n    if (util.base64.test(this.typeDefault)) util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);else util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\n    this.typeDefault = buf;\n  }\n\n  // take special care of maps and repeated fields\n  if (this.map) this.defaultValue = util.emptyObject;else if (this.repeated) this.defaultValue = util.emptyArray;else this.defaultValue = this.typeDefault;\n\n  // ensure proper value on prototype\n  if (this.parent instanceof Type) this.parent.ctor.prototype[this.name] = this.defaultValue;\n  return ReflectionObject.prototype.resolve.call(this);\n};\n\n/**\n * Infers field features from legacy syntax that may have been specified differently.\n * in older editions.\n * @param {string|undefined} edition The edition this proto is on, or undefined if pre-editions\n * @returns {object} The feature values to override\n */\nField.prototype._inferLegacyProtoFeatures = function _inferLegacyProtoFeatures(edition) {\n  if (edition !== \"proto2\" && edition !== \"proto3\") {\n    return {};\n  }\n  var features = {};\n  if (this.rule === \"required\") {\n    features.field_presence = \"LEGACY_REQUIRED\";\n  }\n  if (this.parent && types.defaults[this.type] === undefined) {\n    // We can't use resolvedType because types may not have been resolved yet.  However,\n    // legacy groups are always in the same scope as the field so we don't have to do a\n    // full scan of the tree.\n    var type = this.parent.get(this.type.split(\".\").pop());\n    if (type && type instanceof Type && type.group) {\n      features.message_encoding = \"DELIMITED\";\n    }\n  }\n  if (this.getOption(\"packed\") === true) {\n    features.repeated_field_encoding = \"PACKED\";\n  } else if (this.getOption(\"packed\") === false) {\n    features.repeated_field_encoding = \"EXPANDED\";\n  }\n  return features;\n};\n\n/**\n * @override\n */\nField.prototype._resolveFeatures = function _resolveFeatures(edition) {\n  return ReflectionObject.prototype._resolveFeatures.call(this, this._edition || edition);\n};\n\n/**\n * Decorator function as returned by {@link Field.d} and {@link MapField.d} (TypeScript).\n * @typedef FieldDecorator\n * @type {function}\n * @param {Object} prototype Target prototype\n * @param {string} fieldName Field name\n * @returns {undefined}\n */\n\n/**\n * Field decorator (TypeScript).\n * @name Field.d\n * @function\n * @param {number} fieldId Field id\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"string\"|\"bool\"|\"bytes\"|Object} fieldType Field type\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\n * @param {T} [defaultValue] Default value\n * @returns {FieldDecorator} Decorator function\n * @template T extends number | number[] | Long | Long[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]\n */\nField.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {\n  // submessage: decorate the submessage and use its name as the type\n  if (typeof fieldType === \"function\") fieldType = util.decorateType(fieldType).name;\n\n  // enum reference: create a reflected copy of the enum and keep reuseing it\n  else if (fieldType && typeof fieldType === \"object\") fieldType = util.decorateEnum(fieldType).name;\n  return function fieldDecorator(prototype, fieldName) {\n    util.decorateType(prototype.constructor).add(new Field(fieldName, fieldId, fieldType, fieldRule, {\n      \"default\": defaultValue\n    }));\n  };\n};\n\n/**\n * Field decorator (TypeScript).\n * @name Field.d\n * @function\n * @param {number} fieldId Field id\n * @param {Constructor<T>|string} fieldType Field type\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\n * @returns {FieldDecorator} Decorator function\n * @template T extends Message<T>\n * @variation 2\n */\n// like Field.d but without a default value\n\n// Sets up cyclic dependencies (called in index-light)\nField._configure = function configure(Type_) {\n  Type = Type_;\n};","map":{"version":3,"names":["module","exports","Field","ReflectionObject","require","prototype","Object","create","constructor","className","Enum","types","util","Type","ruleRe","fromJSON","name","json","field","id","type","rule","extend","options","comment","edition","_edition","_defaultEdition","isObject","undefined","call","isInteger","TypeError","isString","test","toString","toLowerCase","repeated","map","message","partOf","typeDefault","defaultValue","long","Long","bytes","resolvedType","extensionField","declaringField","defineProperty","get","_features","field_presence","required","message_encoding","repeated_field_encoding","setOption","value","ifNotSet","toJSON","toJSONOptions","keepComments","Boolean","toObject","_editionToJSON","resolve","resolved","defaults","parent","lookupTypeOrEnum","values","keys","proto3_optional","packed","length","fromNumber","charAt","freeze","buf","base64","decode","newBuffer","utf8","write","emptyObject","emptyArray","ctor","_inferLegacyProtoFeatures","features","split","pop","group","getOption","_resolveFeatures","d","decorateField","fieldId","fieldType","fieldRule","decorateType","decorateEnum","fieldDecorator","fieldName","add","_configure","configure","Type_"],"sources":["/home/linux-1/projects/web-server-app/imx8mp-web-client/node_modules/protobufjs/src/field.js"],"sourcesContent":["\"use strict\";\nmodule.exports = Field;\n\n// extends ReflectionObject\nvar ReflectionObject = require(\"./object\");\n((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = \"Field\";\n\nvar Enum  = require(\"./enum\"),\n    types = require(\"./types\"),\n    util  = require(\"./util\");\n\nvar Type; // cyclic\n\nvar ruleRe = /^required|optional|repeated$/;\n\n/**\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\n * @name Field\n * @classdesc Reflected message field.\n * @extends FieldBase\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {number} id Unique id within its namespace\n * @param {string} type Value type\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\n * @param {Object.<string,*>} [options] Declared options\n */\n\n/**\n * Constructs a field from a field descriptor.\n * @param {string} name Field name\n * @param {IField} json Field descriptor\n * @returns {Field} Created field\n * @throws {TypeError} If arguments are invalid\n */\nField.fromJSON = function fromJSON(name, json) {\n    var field = new Field(name, json.id, json.type, json.rule, json.extend, json.options, json.comment);\n    if (json.edition)\n        field._edition = json.edition;\n    field._defaultEdition = \"proto3\";  // For backwards-compatibility.\n    return field;\n};\n\n/**\n * Not an actual constructor. Use {@link Field} instead.\n * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.\n * @exports FieldBase\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {number} id Unique id within its namespace\n * @param {string} type Value type\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] Comment associated with this field\n */\nfunction Field(name, id, type, rule, extend, options, comment) {\n\n    if (util.isObject(rule)) {\n        comment = extend;\n        options = rule;\n        rule = extend = undefined;\n    } else if (util.isObject(extend)) {\n        comment = options;\n        options = extend;\n        extend = undefined;\n    }\n\n    ReflectionObject.call(this, name, options);\n\n    if (!util.isInteger(id) || id < 0)\n        throw TypeError(\"id must be a non-negative integer\");\n\n    if (!util.isString(type))\n        throw TypeError(\"type must be a string\");\n\n    if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase()))\n        throw TypeError(\"rule must be a string rule\");\n\n    if (extend !== undefined && !util.isString(extend))\n        throw TypeError(\"extend must be a string\");\n\n    /**\n     * Field rule, if any.\n     * @type {string|undefined}\n     */\n    if (rule === \"proto3_optional\") {\n        rule = \"optional\";\n    }\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\n\n    /**\n     * Field type.\n     * @type {string}\n     */\n    this.type = type; // toJSON\n\n    /**\n     * Unique field id.\n     * @type {number}\n     */\n    this.id = id; // toJSON, marker\n\n    /**\n     * Extended type if different from parent.\n     * @type {string|undefined}\n     */\n    this.extend = extend || undefined; // toJSON\n\n    /**\n     * Whether this field is repeated.\n     * @type {boolean}\n     */\n    this.repeated = rule === \"repeated\";\n\n    /**\n     * Whether this field is a map or not.\n     * @type {boolean}\n     */\n    this.map = false;\n\n    /**\n     * Message this field belongs to.\n     * @type {Type|null}\n     */\n    this.message = null;\n\n    /**\n     * OneOf this field belongs to, if any,\n     * @type {OneOf|null}\n     */\n    this.partOf = null;\n\n    /**\n     * The field type's default value.\n     * @type {*}\n     */\n    this.typeDefault = null;\n\n    /**\n     * The field's default value on prototypes.\n     * @type {*}\n     */\n    this.defaultValue = null;\n\n    /**\n     * Whether this field's value should be treated as a long.\n     * @type {boolean}\n     */\n    this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */ false;\n\n    /**\n     * Whether this field's value is a buffer.\n     * @type {boolean}\n     */\n    this.bytes = type === \"bytes\";\n\n    /**\n     * Resolved type if not a basic type.\n     * @type {Type|Enum|null}\n     */\n    this.resolvedType = null;\n\n    /**\n     * Sister-field within the extended type if a declaring extension field.\n     * @type {Field|null}\n     */\n    this.extensionField = null;\n\n    /**\n     * Sister-field within the declaring namespace if an extended field.\n     * @type {Field|null}\n     */\n    this.declaringField = null;\n\n    /**\n     * Comment for this field.\n     * @type {string|null}\n     */\n    this.comment = comment;\n}\n\n/**\n * Determines whether this field is required.\n * @name Field#required\n * @type {boolean}\n * @readonly\n */\nObject.defineProperty(Field.prototype, \"required\", {\n    get: function() {\n        return this._features.field_presence === \"LEGACY_REQUIRED\";\n    }\n});\n\n/**\n * Determines whether this field is not required.\n * @name Field#optional\n * @type {boolean}\n * @readonly\n */\nObject.defineProperty(Field.prototype, \"optional\", {\n    get: function() {\n        return !this.required;\n    }\n});\n\n/**\n * Determines whether this field uses tag-delimited encoding.  In proto2 this\n * corresponded to group syntax.\n * @name Field#delimited\n * @type {boolean}\n * @readonly\n */\nObject.defineProperty(Field.prototype, \"delimited\", {\n    get: function() {\n        return this.resolvedType instanceof Type &&\n            this._features.message_encoding === \"DELIMITED\";\n    }\n});\n\n/**\n * Determines whether this field is packed. Only relevant when repeated.\n * @name Field#packed\n * @type {boolean}\n * @readonly\n */\nObject.defineProperty(Field.prototype, \"packed\", {\n    get: function() {\n        return this._features.repeated_field_encoding === \"PACKED\";\n    }\n});\n\n/**\n * Determines whether this field tracks presence.\n * @name Field#hasPresence\n * @type {boolean}\n * @readonly\n */\nObject.defineProperty(Field.prototype, \"hasPresence\", {\n    get: function() {\n        if (this.repeated || this.map) {\n            return false;\n        }\n        return this.partOf || // oneofs\n            this.declaringField || this.extensionField || // extensions\n            this._features.field_presence !== \"IMPLICIT\";\n    }\n});\n\n/**\n * @override\n */\nField.prototype.setOption = function setOption(name, value, ifNotSet) {\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\n};\n\n/**\n * Field descriptor.\n * @interface IField\n * @property {string} [rule=\"optional\"] Field rule\n * @property {string} type Field type\n * @property {number} id Field id\n * @property {Object.<string,*>} [options] Field options\n */\n\n/**\n * Extension field descriptor.\n * @interface IExtensionField\n * @extends IField\n * @property {string} extend Extended type\n */\n\n/**\n * Converts this field to a field descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IField} Field descriptor\n */\nField.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"edition\" , this._editionToJSON(),\n        \"rule\"    , this.rule !== \"optional\" && this.rule || undefined,\n        \"type\"    , this.type,\n        \"id\"      , this.id,\n        \"extend\"  , this.extend,\n        \"options\" , this.options,\n        \"comment\" , keepComments ? this.comment : undefined\n    ]);\n};\n\n/**\n * Resolves this field's type references.\n * @returns {Field} `this`\n * @throws {Error} If any reference cannot be resolved\n */\nField.prototype.resolve = function resolve() {\n\n    if (this.resolved)\n        return this;\n\n    if ((this.typeDefault = types.defaults[this.type]) === undefined) { // if not a basic type, resolve it\n        this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);\n        if (this.resolvedType instanceof Type)\n            this.typeDefault = null;\n        else // instanceof Enum\n            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\n    } else if (this.options && this.options.proto3_optional) {\n        // proto3 scalar value marked optional; should default to null\n        this.typeDefault = null;\n    }\n\n    // use explicitly set default value if present\n    if (this.options && this.options[\"default\"] != null) {\n        this.typeDefault = this.options[\"default\"];\n        if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\")\n            this.typeDefault = this.resolvedType.values[this.typeDefault];\n    }\n\n    // remove unnecessary options\n    if (this.options) {\n        if (this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum))\n            delete this.options.packed;\n        if (!Object.keys(this.options).length)\n            this.options = undefined;\n    }\n\n    // convert to internal data type if necesssary\n    if (this.long) {\n        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\n\n        /* istanbul ignore else */\n        if (Object.freeze)\n            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\n\n    } else if (this.bytes && typeof this.typeDefault === \"string\") {\n        var buf;\n        if (util.base64.test(this.typeDefault))\n            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);\n        else\n            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\n        this.typeDefault = buf;\n    }\n\n    // take special care of maps and repeated fields\n    if (this.map)\n        this.defaultValue = util.emptyObject;\n    else if (this.repeated)\n        this.defaultValue = util.emptyArray;\n    else\n        this.defaultValue = this.typeDefault;\n\n    // ensure proper value on prototype\n    if (this.parent instanceof Type)\n        this.parent.ctor.prototype[this.name] = this.defaultValue;\n\n    return ReflectionObject.prototype.resolve.call(this);\n};\n\n/**\n * Infers field features from legacy syntax that may have been specified differently.\n * in older editions.\n * @param {string|undefined} edition The edition this proto is on, or undefined if pre-editions\n * @returns {object} The feature values to override\n */\nField.prototype._inferLegacyProtoFeatures = function _inferLegacyProtoFeatures(edition) {\n    if (edition !== \"proto2\" && edition !== \"proto3\") {\n        return {};\n    }\n\n    var features = {};\n\n    if (this.rule === \"required\") {\n        features.field_presence = \"LEGACY_REQUIRED\";\n    }\n    if (this.parent && types.defaults[this.type] === undefined) {\n        // We can't use resolvedType because types may not have been resolved yet.  However,\n        // legacy groups are always in the same scope as the field so we don't have to do a\n        // full scan of the tree.\n        var type = this.parent.get(this.type.split(\".\").pop());\n        if (type && type instanceof Type && type.group) {\n            features.message_encoding = \"DELIMITED\";\n        }\n    }\n    if (this.getOption(\"packed\") === true) {\n        features.repeated_field_encoding = \"PACKED\";\n    } else if (this.getOption(\"packed\") === false) {\n        features.repeated_field_encoding = \"EXPANDED\";\n    }\n    return features;\n};\n\n/**\n * @override\n */\nField.prototype._resolveFeatures = function _resolveFeatures(edition) {\n    return ReflectionObject.prototype._resolveFeatures.call(this, this._edition || edition);\n};\n\n/**\n * Decorator function as returned by {@link Field.d} and {@link MapField.d} (TypeScript).\n * @typedef FieldDecorator\n * @type {function}\n * @param {Object} prototype Target prototype\n * @param {string} fieldName Field name\n * @returns {undefined}\n */\n\n/**\n * Field decorator (TypeScript).\n * @name Field.d\n * @function\n * @param {number} fieldId Field id\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"string\"|\"bool\"|\"bytes\"|Object} fieldType Field type\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\n * @param {T} [defaultValue] Default value\n * @returns {FieldDecorator} Decorator function\n * @template T extends number | number[] | Long | Long[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]\n */\nField.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {\n\n    // submessage: decorate the submessage and use its name as the type\n    if (typeof fieldType === \"function\")\n        fieldType = util.decorateType(fieldType).name;\n\n    // enum reference: create a reflected copy of the enum and keep reuseing it\n    else if (fieldType && typeof fieldType === \"object\")\n        fieldType = util.decorateEnum(fieldType).name;\n\n    return function fieldDecorator(prototype, fieldName) {\n        util.decorateType(prototype.constructor)\n            .add(new Field(fieldName, fieldId, fieldType, fieldRule, { \"default\": defaultValue }));\n    };\n};\n\n/**\n * Field decorator (TypeScript).\n * @name Field.d\n * @function\n * @param {number} fieldId Field id\n * @param {Constructor<T>|string} fieldType Field type\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\n * @returns {FieldDecorator} Decorator function\n * @template T extends Message<T>\n * @variation 2\n */\n// like Field.d but without a default value\n\n// Sets up cyclic dependencies (called in index-light)\nField._configure = function configure(Type_) {\n    Type = Type_;\n};\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,OAAO,GAAGC,KAAK;;AAEtB;AACA,IAAIC,gBAAgB,GAAGC,OAAO,CAAC,UAAU,CAAC;AAC1C,CAAC,CAACF,KAAK,CAACG,SAAS,GAAGC,MAAM,CAACC,MAAM,CAACJ,gBAAgB,CAACE,SAAS,CAAC,EAAEG,WAAW,GAAGN,KAAK,EAAEO,SAAS,GAAG,OAAO;AAEvG,IAAIC,IAAI,GAAIN,OAAO,CAAC,QAAQ,CAAC;EACzBO,KAAK,GAAGP,OAAO,CAAC,SAAS,CAAC;EAC1BQ,IAAI,GAAIR,OAAO,CAAC,QAAQ,CAAC;AAE7B,IAAIS,IAAI,CAAC,CAAC;;AAEV,IAAIC,MAAM,GAAG,8BAA8B;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACAZ,KAAK,CAACa,QAAQ,GAAG,SAASA,QAAQA,CAACC,IAAI,EAAEC,IAAI,EAAE;EAC3C,IAAIC,KAAK,GAAG,IAAIhB,KAAK,CAACc,IAAI,EAAEC,IAAI,CAACE,EAAE,EAAEF,IAAI,CAACG,IAAI,EAAEH,IAAI,CAACI,IAAI,EAAEJ,IAAI,CAACK,MAAM,EAAEL,IAAI,CAACM,OAAO,EAAEN,IAAI,CAACO,OAAO,CAAC;EACnG,IAAIP,IAAI,CAACQ,OAAO,EACZP,KAAK,CAACQ,QAAQ,GAAGT,IAAI,CAACQ,OAAO;EACjCP,KAAK,CAACS,eAAe,GAAG,QAAQ,CAAC,CAAE;EACnC,OAAOT,KAAK;AAChB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAShB,KAAKA,CAACc,IAAI,EAAEG,EAAE,EAAEC,IAAI,EAAEC,IAAI,EAAEC,MAAM,EAAEC,OAAO,EAAEC,OAAO,EAAE;EAE3D,IAAIZ,IAAI,CAACgB,QAAQ,CAACP,IAAI,CAAC,EAAE;IACrBG,OAAO,GAAGF,MAAM;IAChBC,OAAO,GAAGF,IAAI;IACdA,IAAI,GAAGC,MAAM,GAAGO,SAAS;EAC7B,CAAC,MAAM,IAAIjB,IAAI,CAACgB,QAAQ,CAACN,MAAM,CAAC,EAAE;IAC9BE,OAAO,GAAGD,OAAO;IACjBA,OAAO,GAAGD,MAAM;IAChBA,MAAM,GAAGO,SAAS;EACtB;EAEA1B,gBAAgB,CAAC2B,IAAI,CAAC,IAAI,EAAEd,IAAI,EAAEO,OAAO,CAAC;EAE1C,IAAI,CAACX,IAAI,CAACmB,SAAS,CAACZ,EAAE,CAAC,IAAIA,EAAE,GAAG,CAAC,EAC7B,MAAMa,SAAS,CAAC,mCAAmC,CAAC;EAExD,IAAI,CAACpB,IAAI,CAACqB,QAAQ,CAACb,IAAI,CAAC,EACpB,MAAMY,SAAS,CAAC,uBAAuB,CAAC;EAE5C,IAAIX,IAAI,KAAKQ,SAAS,IAAI,CAACf,MAAM,CAACoB,IAAI,CAACb,IAAI,GAAGA,IAAI,CAACc,QAAQ,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAAC,EACxE,MAAMJ,SAAS,CAAC,4BAA4B,CAAC;EAEjD,IAAIV,MAAM,KAAKO,SAAS,IAAI,CAACjB,IAAI,CAACqB,QAAQ,CAACX,MAAM,CAAC,EAC9C,MAAMU,SAAS,CAAC,yBAAyB,CAAC;;EAE9C;AACJ;AACA;AACA;EACI,IAAIX,IAAI,KAAK,iBAAiB,EAAE;IAC5BA,IAAI,GAAG,UAAU;EACrB;EACA,IAAI,CAACA,IAAI,GAAGA,IAAI,IAAIA,IAAI,KAAK,UAAU,GAAGA,IAAI,GAAGQ,SAAS,CAAC,CAAC;;EAE5D;AACJ;AACA;AACA;EACI,IAAI,CAACT,IAAI,GAAGA,IAAI,CAAC,CAAC;;EAElB;AACJ;AACA;AACA;EACI,IAAI,CAACD,EAAE,GAAGA,EAAE,CAAC,CAAC;;EAEd;AACJ;AACA;AACA;EACI,IAAI,CAACG,MAAM,GAAGA,MAAM,IAAIO,SAAS,CAAC,CAAC;;EAEnC;AACJ;AACA;AACA;EACI,IAAI,CAACQ,QAAQ,GAAGhB,IAAI,KAAK,UAAU;;EAEnC;AACJ;AACA;AACA;EACI,IAAI,CAACiB,GAAG,GAAG,KAAK;;EAEhB;AACJ;AACA;AACA;EACI,IAAI,CAACC,OAAO,GAAG,IAAI;;EAEnB;AACJ;AACA;AACA;EACI,IAAI,CAACC,MAAM,GAAG,IAAI;;EAElB;AACJ;AACA;AACA;EACI,IAAI,CAACC,WAAW,GAAG,IAAI;;EAEvB;AACJ;AACA;AACA;EACI,IAAI,CAACC,YAAY,GAAG,IAAI;;EAExB;AACJ;AACA;AACA;EACI,IAAI,CAACC,IAAI,GAAG/B,IAAI,CAACgC,IAAI,GAAGjC,KAAK,CAACgC,IAAI,CAACvB,IAAI,CAAC,KAAKS,SAAS,GAAG,0BAA2B,KAAK;;EAEzF;AACJ;AACA;AACA;EACI,IAAI,CAACgB,KAAK,GAAGzB,IAAI,KAAK,OAAO;;EAE7B;AACJ;AACA;AACA;EACI,IAAI,CAAC0B,YAAY,GAAG,IAAI;;EAExB;AACJ;AACA;AACA;EACI,IAAI,CAACC,cAAc,GAAG,IAAI;;EAE1B;AACJ;AACA;AACA;EACI,IAAI,CAACC,cAAc,GAAG,IAAI;;EAE1B;AACJ;AACA;AACA;EACI,IAAI,CAACxB,OAAO,GAAGA,OAAO;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACAlB,MAAM,CAAC2C,cAAc,CAAC/C,KAAK,CAACG,SAAS,EAAE,UAAU,EAAE;EAC/C6C,GAAG,EAAE,SAAAA,CAAA,EAAW;IACZ,OAAO,IAAI,CAACC,SAAS,CAACC,cAAc,KAAK,iBAAiB;EAC9D;AACJ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA9C,MAAM,CAAC2C,cAAc,CAAC/C,KAAK,CAACG,SAAS,EAAE,UAAU,EAAE;EAC/C6C,GAAG,EAAE,SAAAA,CAAA,EAAW;IACZ,OAAO,CAAC,IAAI,CAACG,QAAQ;EACzB;AACJ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA/C,MAAM,CAAC2C,cAAc,CAAC/C,KAAK,CAACG,SAAS,EAAE,WAAW,EAAE;EAChD6C,GAAG,EAAE,SAAAA,CAAA,EAAW;IACZ,OAAO,IAAI,CAACJ,YAAY,YAAYjC,IAAI,IACpC,IAAI,CAACsC,SAAS,CAACG,gBAAgB,KAAK,WAAW;EACvD;AACJ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACAhD,MAAM,CAAC2C,cAAc,CAAC/C,KAAK,CAACG,SAAS,EAAE,QAAQ,EAAE;EAC7C6C,GAAG,EAAE,SAAAA,CAAA,EAAW;IACZ,OAAO,IAAI,CAACC,SAAS,CAACI,uBAAuB,KAAK,QAAQ;EAC9D;AACJ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACAjD,MAAM,CAAC2C,cAAc,CAAC/C,KAAK,CAACG,SAAS,EAAE,aAAa,EAAE;EAClD6C,GAAG,EAAE,SAAAA,CAAA,EAAW;IACZ,IAAI,IAAI,CAACb,QAAQ,IAAI,IAAI,CAACC,GAAG,EAAE;MAC3B,OAAO,KAAK;IAChB;IACA,OAAO,IAAI,CAACE,MAAM;IAAI;IAClB,IAAI,CAACQ,cAAc,IAAI,IAAI,CAACD,cAAc;IAAI;IAC9C,IAAI,CAACI,SAAS,CAACC,cAAc,KAAK,UAAU;EACpD;AACJ,CAAC,CAAC;;AAEF;AACA;AACA;AACAlD,KAAK,CAACG,SAAS,CAACmD,SAAS,GAAG,SAASA,SAASA,CAACxC,IAAI,EAAEyC,KAAK,EAAEC,QAAQ,EAAE;EAClE,OAAOvD,gBAAgB,CAACE,SAAS,CAACmD,SAAS,CAAC1B,IAAI,CAAC,IAAI,EAAEd,IAAI,EAAEyC,KAAK,EAAEC,QAAQ,CAAC;AACjF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACAxD,KAAK,CAACG,SAAS,CAACsD,MAAM,GAAG,SAASA,MAAMA,CAACC,aAAa,EAAE;EACpD,IAAIC,YAAY,GAAGD,aAAa,GAAGE,OAAO,CAACF,aAAa,CAACC,YAAY,CAAC,GAAG,KAAK;EAC9E,OAAOjD,IAAI,CAACmD,QAAQ,CAAC,CACjB,SAAS,EAAG,IAAI,CAACC,cAAc,CAAC,CAAC,EACjC,MAAM,EAAM,IAAI,CAAC3C,IAAI,KAAK,UAAU,IAAI,IAAI,CAACA,IAAI,IAAIQ,SAAS,EAC9D,MAAM,EAAM,IAAI,CAACT,IAAI,EACrB,IAAI,EAAQ,IAAI,CAACD,EAAE,EACnB,QAAQ,EAAI,IAAI,CAACG,MAAM,EACvB,SAAS,EAAG,IAAI,CAACC,OAAO,EACxB,SAAS,EAAGsC,YAAY,GAAG,IAAI,CAACrC,OAAO,GAAGK,SAAS,CACtD,CAAC;AACN,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA3B,KAAK,CAACG,SAAS,CAAC4D,OAAO,GAAG,SAASA,OAAOA,CAAA,EAAG;EAEzC,IAAI,IAAI,CAACC,QAAQ,EACb,OAAO,IAAI;EAEf,IAAI,CAAC,IAAI,CAACzB,WAAW,GAAG9B,KAAK,CAACwD,QAAQ,CAAC,IAAI,CAAC/C,IAAI,CAAC,MAAMS,SAAS,EAAE;IAAE;IAChE,IAAI,CAACiB,YAAY,GAAG,CAAC,IAAI,CAACE,cAAc,GAAG,IAAI,CAACA,cAAc,CAACoB,MAAM,GAAG,IAAI,CAACA,MAAM,EAAEC,gBAAgB,CAAC,IAAI,CAACjD,IAAI,CAAC;IAChH,IAAI,IAAI,CAAC0B,YAAY,YAAYjC,IAAI,EACjC,IAAI,CAAC4B,WAAW,GAAG,IAAI,CAAC;MACvB;MACD,IAAI,CAACA,WAAW,GAAG,IAAI,CAACK,YAAY,CAACwB,MAAM,CAAChE,MAAM,CAACiE,IAAI,CAAC,IAAI,CAACzB,YAAY,CAACwB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC/F,CAAC,MAAM,IAAI,IAAI,CAAC/C,OAAO,IAAI,IAAI,CAACA,OAAO,CAACiD,eAAe,EAAE;IACrD;IACA,IAAI,CAAC/B,WAAW,GAAG,IAAI;EAC3B;;EAEA;EACA,IAAI,IAAI,CAAClB,OAAO,IAAI,IAAI,CAACA,OAAO,CAAC,SAAS,CAAC,IAAI,IAAI,EAAE;IACjD,IAAI,CAACkB,WAAW,GAAG,IAAI,CAAClB,OAAO,CAAC,SAAS,CAAC;IAC1C,IAAI,IAAI,CAACuB,YAAY,YAAYpC,IAAI,IAAI,OAAO,IAAI,CAAC+B,WAAW,KAAK,QAAQ,EACzE,IAAI,CAACA,WAAW,GAAG,IAAI,CAACK,YAAY,CAACwB,MAAM,CAAC,IAAI,CAAC7B,WAAW,CAAC;EACrE;;EAEA;EACA,IAAI,IAAI,CAAClB,OAAO,EAAE;IACd,IAAI,IAAI,CAACA,OAAO,CAACkD,MAAM,KAAK5C,SAAS,IAAI,IAAI,CAACiB,YAAY,IAAI,EAAE,IAAI,CAACA,YAAY,YAAYpC,IAAI,CAAC,EAC9F,OAAO,IAAI,CAACa,OAAO,CAACkD,MAAM;IAC9B,IAAI,CAACnE,MAAM,CAACiE,IAAI,CAAC,IAAI,CAAChD,OAAO,CAAC,CAACmD,MAAM,EACjC,IAAI,CAACnD,OAAO,GAAGM,SAAS;EAChC;;EAEA;EACA,IAAI,IAAI,CAACc,IAAI,EAAE;IACX,IAAI,CAACF,WAAW,GAAG7B,IAAI,CAACgC,IAAI,CAAC+B,UAAU,CAAC,IAAI,CAAClC,WAAW,EAAE,IAAI,CAACrB,IAAI,CAACwD,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC;;IAEtF;IACA,IAAItE,MAAM,CAACuE,MAAM,EACbvE,MAAM,CAACuE,MAAM,CAAC,IAAI,CAACpC,WAAW,CAAC,CAAC,CAAC;EAEzC,CAAC,MAAM,IAAI,IAAI,CAACI,KAAK,IAAI,OAAO,IAAI,CAACJ,WAAW,KAAK,QAAQ,EAAE;IAC3D,IAAIqC,GAAG;IACP,IAAIlE,IAAI,CAACmE,MAAM,CAAC7C,IAAI,CAAC,IAAI,CAACO,WAAW,CAAC,EAClC7B,IAAI,CAACmE,MAAM,CAACC,MAAM,CAAC,IAAI,CAACvC,WAAW,EAAEqC,GAAG,GAAGlE,IAAI,CAACqE,SAAS,CAACrE,IAAI,CAACmE,MAAM,CAACL,MAAM,CAAC,IAAI,CAACjC,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAEpG7B,IAAI,CAACsE,IAAI,CAACC,KAAK,CAAC,IAAI,CAAC1C,WAAW,EAAEqC,GAAG,GAAGlE,IAAI,CAACqE,SAAS,CAACrE,IAAI,CAACsE,IAAI,CAACR,MAAM,CAAC,IAAI,CAACjC,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC;IAClG,IAAI,CAACA,WAAW,GAAGqC,GAAG;EAC1B;;EAEA;EACA,IAAI,IAAI,CAACxC,GAAG,EACR,IAAI,CAACI,YAAY,GAAG9B,IAAI,CAACwE,WAAW,CAAC,KACpC,IAAI,IAAI,CAAC/C,QAAQ,EAClB,IAAI,CAACK,YAAY,GAAG9B,IAAI,CAACyE,UAAU,CAAC,KAEpC,IAAI,CAAC3C,YAAY,GAAG,IAAI,CAACD,WAAW;;EAExC;EACA,IAAI,IAAI,CAAC2B,MAAM,YAAYvD,IAAI,EAC3B,IAAI,CAACuD,MAAM,CAACkB,IAAI,CAACjF,SAAS,CAAC,IAAI,CAACW,IAAI,CAAC,GAAG,IAAI,CAAC0B,YAAY;EAE7D,OAAOvC,gBAAgB,CAACE,SAAS,CAAC4D,OAAO,CAACnC,IAAI,CAAC,IAAI,CAAC;AACxD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA5B,KAAK,CAACG,SAAS,CAACkF,yBAAyB,GAAG,SAASA,yBAAyBA,CAAC9D,OAAO,EAAE;EACpF,IAAIA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,QAAQ,EAAE;IAC9C,OAAO,CAAC,CAAC;EACb;EAEA,IAAI+D,QAAQ,GAAG,CAAC,CAAC;EAEjB,IAAI,IAAI,CAACnE,IAAI,KAAK,UAAU,EAAE;IAC1BmE,QAAQ,CAACpC,cAAc,GAAG,iBAAiB;EAC/C;EACA,IAAI,IAAI,CAACgB,MAAM,IAAIzD,KAAK,CAACwD,QAAQ,CAAC,IAAI,CAAC/C,IAAI,CAAC,KAAKS,SAAS,EAAE;IACxD;IACA;IACA;IACA,IAAIT,IAAI,GAAG,IAAI,CAACgD,MAAM,CAAClB,GAAG,CAAC,IAAI,CAAC9B,IAAI,CAACqE,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC,CAAC;IACtD,IAAItE,IAAI,IAAIA,IAAI,YAAYP,IAAI,IAAIO,IAAI,CAACuE,KAAK,EAAE;MAC5CH,QAAQ,CAAClC,gBAAgB,GAAG,WAAW;IAC3C;EACJ;EACA,IAAI,IAAI,CAACsC,SAAS,CAAC,QAAQ,CAAC,KAAK,IAAI,EAAE;IACnCJ,QAAQ,CAACjC,uBAAuB,GAAG,QAAQ;EAC/C,CAAC,MAAM,IAAI,IAAI,CAACqC,SAAS,CAAC,QAAQ,CAAC,KAAK,KAAK,EAAE;IAC3CJ,QAAQ,CAACjC,uBAAuB,GAAG,UAAU;EACjD;EACA,OAAOiC,QAAQ;AACnB,CAAC;;AAED;AACA;AACA;AACAtF,KAAK,CAACG,SAAS,CAACwF,gBAAgB,GAAG,SAASA,gBAAgBA,CAACpE,OAAO,EAAE;EAClE,OAAOtB,gBAAgB,CAACE,SAAS,CAACwF,gBAAgB,CAAC/D,IAAI,CAAC,IAAI,EAAE,IAAI,CAACJ,QAAQ,IAAID,OAAO,CAAC;AAC3F,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAvB,KAAK,CAAC4F,CAAC,GAAG,SAASC,aAAaA,CAACC,OAAO,EAAEC,SAAS,EAAEC,SAAS,EAAExD,YAAY,EAAE;EAE1E;EACA,IAAI,OAAOuD,SAAS,KAAK,UAAU,EAC/BA,SAAS,GAAGrF,IAAI,CAACuF,YAAY,CAACF,SAAS,CAAC,CAACjF,IAAI;;EAEjD;EAAA,KACK,IAAIiF,SAAS,IAAI,OAAOA,SAAS,KAAK,QAAQ,EAC/CA,SAAS,GAAGrF,IAAI,CAACwF,YAAY,CAACH,SAAS,CAAC,CAACjF,IAAI;EAEjD,OAAO,SAASqF,cAAcA,CAAChG,SAAS,EAAEiG,SAAS,EAAE;IACjD1F,IAAI,CAACuF,YAAY,CAAC9F,SAAS,CAACG,WAAW,CAAC,CACnC+F,GAAG,CAAC,IAAIrG,KAAK,CAACoG,SAAS,EAAEN,OAAO,EAAEC,SAAS,EAAEC,SAAS,EAAE;MAAE,SAAS,EAAExD;IAAa,CAAC,CAAC,CAAC;EAC9F,CAAC;AACL,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACAxC,KAAK,CAACsG,UAAU,GAAG,SAASC,SAASA,CAACC,KAAK,EAAE;EACzC7F,IAAI,GAAG6F,KAAK;AAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}