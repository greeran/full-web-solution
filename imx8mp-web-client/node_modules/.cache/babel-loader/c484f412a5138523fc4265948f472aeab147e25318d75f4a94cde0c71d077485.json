{"ast":null,"code":"\"use strict\";\n\nmodule.exports = Service;\n\n// extends Namespace\nvar Namespace = require(\"./namespace\");\n((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = \"Service\";\nvar Method = require(\"./method\"),\n  util = require(\"./util\"),\n  rpc = require(\"./rpc\");\n\n/**\n * Constructs a new service instance.\n * @classdesc Reflected service.\n * @extends NamespaceBase\n * @constructor\n * @param {string} name Service name\n * @param {Object.<string,*>} [options] Service options\n * @throws {TypeError} If arguments are invalid\n */\nfunction Service(name, options) {\n  Namespace.call(this, name, options);\n\n  /**\n   * Service methods.\n   * @type {Object.<string,Method>}\n   */\n  this.methods = {}; // toJSON, marker\n\n  /**\n   * Cached methods as an array.\n   * @type {Method[]|null}\n   * @private\n   */\n  this._methodsArray = null;\n}\n\n/**\n * Service descriptor.\n * @interface IService\n * @extends INamespace\n * @property {Object.<string,IMethod>} methods Method descriptors\n */\n\n/**\n * Constructs a service from a service descriptor.\n * @param {string} name Service name\n * @param {IService} json Service descriptor\n * @returns {Service} Created service\n * @throws {TypeError} If arguments are invalid\n */\nService.fromJSON = function fromJSON(name, json) {\n  var service = new Service(name, json.options);\n  /* istanbul ignore else */\n  if (json.methods) for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i) service.add(Method.fromJSON(names[i], json.methods[names[i]]));\n  if (json.nested) service.addJSON(json.nested);\n  if (json.edition) service._edition = json.edition;\n  service.comment = json.comment;\n  service._defaultEdition = \"proto3\"; // For backwards-compatibility.\n  return service;\n};\n\n/**\n * Converts this service to a service descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IService} Service descriptor\n */\nService.prototype.toJSON = function toJSON(toJSONOptions) {\n  var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\n  var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n  return util.toObject([\"edition\", this._editionToJSON(), \"options\", inherited && inherited.options || undefined, \"methods\", Namespace.arrayToJSON(this.methodsArray, toJSONOptions) || /* istanbul ignore next */{}, \"nested\", inherited && inherited.nested || undefined, \"comment\", keepComments ? this.comment : undefined]);\n};\n\n/**\n * Methods of this service as an array for iteration.\n * @name Service#methodsArray\n * @type {Method[]}\n * @readonly\n */\nObject.defineProperty(Service.prototype, \"methodsArray\", {\n  get: function () {\n    return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\n  }\n});\nfunction clearCache(service) {\n  service._methodsArray = null;\n  return service;\n}\n\n/**\n * @override\n */\nService.prototype.get = function get(name) {\n  return this.methods[name] || Namespace.prototype.get.call(this, name);\n};\n\n/**\n * @override\n */\nService.prototype.resolveAll = function resolveAll() {\n  if (!this._needsRecursiveResolve) return this;\n  Namespace.prototype.resolve.call(this);\n  var methods = this.methodsArray;\n  for (var i = 0; i < methods.length; ++i) methods[i].resolve();\n  return this;\n};\n\n/**\n * @override\n */\nService.prototype._resolveFeaturesRecursive = function _resolveFeaturesRecursive(edition) {\n  if (!this._needsRecursiveFeatureResolution) return this;\n  edition = this._edition || edition;\n  Namespace.prototype._resolveFeaturesRecursive.call(this, edition);\n  this.methodsArray.forEach(method => {\n    method._resolveFeaturesRecursive(edition);\n  });\n  return this;\n};\n\n/**\n * @override\n */\nService.prototype.add = function add(object) {\n  /* istanbul ignore if */\n  if (this.get(object.name)) throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n  if (object instanceof Method) {\n    this.methods[object.name] = object;\n    object.parent = this;\n    return clearCache(this);\n  }\n  return Namespace.prototype.add.call(this, object);\n};\n\n/**\n * @override\n */\nService.prototype.remove = function remove(object) {\n  if (object instanceof Method) {\n    /* istanbul ignore if */\n    if (this.methods[object.name] !== object) throw Error(object + \" is not a member of \" + this);\n    delete this.methods[object.name];\n    object.parent = null;\n    return clearCache(this);\n  }\n  return Namespace.prototype.remove.call(this, object);\n};\n\n/**\n * Creates a runtime service using the specified rpc implementation.\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.\n */\nService.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n  var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);\n  for (var i = 0, method; i < /* initializes */this.methodsArray.length; ++i) {\n    var methodName = util.lcFirst((method = this._methodsArray[i]).resolve().name).replace(/[^$\\w_]/g, \"\");\n    rpcService[methodName] = util.codegen([\"r\", \"c\"], util.isReserved(methodName) ? methodName + \"_\" : methodName)(\"return this.rpcCall(m,q,s,r,c)\")({\n      m: method,\n      q: method.resolvedRequestType.ctor,\n      s: method.resolvedResponseType.ctor\n    });\n  }\n  return rpcService;\n};","map":{"version":3,"names":["module","exports","Service","Namespace","require","prototype","Object","create","constructor","className","Method","util","rpc","name","options","call","methods","_methodsArray","fromJSON","json","service","names","keys","i","length","add","nested","addJSON","edition","_edition","comment","_defaultEdition","toJSON","toJSONOptions","inherited","keepComments","Boolean","toObject","_editionToJSON","undefined","arrayToJSON","methodsArray","defineProperty","get","toArray","clearCache","resolveAll","_needsRecursiveResolve","resolve","_resolveFeaturesRecursive","_needsRecursiveFeatureResolution","forEach","method","object","Error","parent","remove","rpcImpl","requestDelimited","responseDelimited","rpcService","methodName","lcFirst","replace","codegen","isReserved","m","q","resolvedRequestType","ctor","s","resolvedResponseType"],"sources":["/home/linux-1/projects/web-server-app/imx8mp-web-client/node_modules/protobufjs/src/service.js"],"sourcesContent":["\"use strict\";\nmodule.exports = Service;\n\n// extends Namespace\nvar Namespace = require(\"./namespace\");\n((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = \"Service\";\n\nvar Method = require(\"./method\"),\n    util   = require(\"./util\"),\n    rpc    = require(\"./rpc\");\n\n/**\n * Constructs a new service instance.\n * @classdesc Reflected service.\n * @extends NamespaceBase\n * @constructor\n * @param {string} name Service name\n * @param {Object.<string,*>} [options] Service options\n * @throws {TypeError} If arguments are invalid\n */\nfunction Service(name, options) {\n    Namespace.call(this, name, options);\n\n    /**\n     * Service methods.\n     * @type {Object.<string,Method>}\n     */\n    this.methods = {}; // toJSON, marker\n\n    /**\n     * Cached methods as an array.\n     * @type {Method[]|null}\n     * @private\n     */\n    this._methodsArray = null;\n}\n\n/**\n * Service descriptor.\n * @interface IService\n * @extends INamespace\n * @property {Object.<string,IMethod>} methods Method descriptors\n */\n\n/**\n * Constructs a service from a service descriptor.\n * @param {string} name Service name\n * @param {IService} json Service descriptor\n * @returns {Service} Created service\n * @throws {TypeError} If arguments are invalid\n */\nService.fromJSON = function fromJSON(name, json) {\n    var service = new Service(name, json.options);\n    /* istanbul ignore else */\n    if (json.methods)\n        for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)\n            service.add(Method.fromJSON(names[i], json.methods[names[i]]));\n    if (json.nested)\n        service.addJSON(json.nested);\n    if (json.edition)\n        service._edition = json.edition;\n    service.comment = json.comment;\n    service._defaultEdition = \"proto3\";  // For backwards-compatibility.\n    return service;\n};\n\n/**\n * Converts this service to a service descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IService} Service descriptor\n */\nService.prototype.toJSON = function toJSON(toJSONOptions) {\n    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"edition\" , this._editionToJSON(),\n        \"options\" , inherited && inherited.options || undefined,\n        \"methods\" , Namespace.arrayToJSON(this.methodsArray, toJSONOptions) || /* istanbul ignore next */ {},\n        \"nested\"  , inherited && inherited.nested || undefined,\n        \"comment\" , keepComments ? this.comment : undefined\n    ]);\n};\n\n/**\n * Methods of this service as an array for iteration.\n * @name Service#methodsArray\n * @type {Method[]}\n * @readonly\n */\nObject.defineProperty(Service.prototype, \"methodsArray\", {\n    get: function() {\n        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\n    }\n});\n\nfunction clearCache(service) {\n    service._methodsArray = null;\n    return service;\n}\n\n/**\n * @override\n */\nService.prototype.get = function get(name) {\n    return this.methods[name]\n        || Namespace.prototype.get.call(this, name);\n};\n\n/**\n * @override\n */\nService.prototype.resolveAll = function resolveAll() {\n    if (!this._needsRecursiveResolve) return this;\n\n    Namespace.prototype.resolve.call(this);\n    var methods = this.methodsArray;\n    for (var i = 0; i < methods.length; ++i)\n        methods[i].resolve();\n    return this;\n};\n\n/**\n * @override\n */\nService.prototype._resolveFeaturesRecursive = function _resolveFeaturesRecursive(edition) {\n    if (!this._needsRecursiveFeatureResolution) return this;\n\n    edition = this._edition || edition;\n\n    Namespace.prototype._resolveFeaturesRecursive.call(this, edition);\n    this.methodsArray.forEach(method => {\n        method._resolveFeaturesRecursive(edition);\n    });\n    return this;\n};\n\n/**\n * @override\n */\nService.prototype.add = function add(object) {\n\n    /* istanbul ignore if */\n    if (this.get(object.name))\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n\n    if (object instanceof Method) {\n        this.methods[object.name] = object;\n        object.parent = this;\n        return clearCache(this);\n    }\n    return Namespace.prototype.add.call(this, object);\n};\n\n/**\n * @override\n */\nService.prototype.remove = function remove(object) {\n    if (object instanceof Method) {\n\n        /* istanbul ignore if */\n        if (this.methods[object.name] !== object)\n            throw Error(object + \" is not a member of \" + this);\n\n        delete this.methods[object.name];\n        object.parent = null;\n        return clearCache(this);\n    }\n    return Namespace.prototype.remove.call(this, object);\n};\n\n/**\n * Creates a runtime service using the specified rpc implementation.\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.\n */\nService.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n    var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);\n    for (var i = 0, method; i < /* initializes */ this.methodsArray.length; ++i) {\n        var methodName = util.lcFirst((method = this._methodsArray[i]).resolve().name).replace(/[^$\\w_]/g, \"\");\n        rpcService[methodName] = util.codegen([\"r\",\"c\"], util.isReserved(methodName) ? methodName + \"_\" : methodName)(\"return this.rpcCall(m,q,s,r,c)\")({\n            m: method,\n            q: method.resolvedRequestType.ctor,\n            s: method.resolvedResponseType.ctor\n        });\n    }\n    return rpcService;\n};\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,OAAO,GAAGC,OAAO;;AAExB;AACA,IAAIC,SAAS,GAAGC,OAAO,CAAC,aAAa,CAAC;AACtC,CAAC,CAACF,OAAO,CAACG,SAAS,GAAGC,MAAM,CAACC,MAAM,CAACJ,SAAS,CAACE,SAAS,CAAC,EAAEG,WAAW,GAAGN,OAAO,EAAEO,SAAS,GAAG,SAAS;AAEtG,IAAIC,MAAM,GAAGN,OAAO,CAAC,UAAU,CAAC;EAC5BO,IAAI,GAAKP,OAAO,CAAC,QAAQ,CAAC;EAC1BQ,GAAG,GAAMR,OAAO,CAAC,OAAO,CAAC;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,OAAOA,CAACW,IAAI,EAAEC,OAAO,EAAE;EAC5BX,SAAS,CAACY,IAAI,CAAC,IAAI,EAAEF,IAAI,EAAEC,OAAO,CAAC;;EAEnC;AACJ;AACA;AACA;EACI,IAAI,CAACE,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC;;EAEnB;AACJ;AACA;AACA;AACA;EACI,IAAI,CAACC,aAAa,GAAG,IAAI;AAC7B;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACAf,OAAO,CAACgB,QAAQ,GAAG,SAASA,QAAQA,CAACL,IAAI,EAAEM,IAAI,EAAE;EAC7C,IAAIC,OAAO,GAAG,IAAIlB,OAAO,CAACW,IAAI,EAAEM,IAAI,CAACL,OAAO,CAAC;EAC7C;EACA,IAAIK,IAAI,CAACH,OAAO,EACZ,KAAK,IAAIK,KAAK,GAAGf,MAAM,CAACgB,IAAI,CAACH,IAAI,CAACH,OAAO,CAAC,EAAEO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACG,MAAM,EAAE,EAAED,CAAC,EACpEH,OAAO,CAACK,GAAG,CAACf,MAAM,CAACQ,QAAQ,CAACG,KAAK,CAACE,CAAC,CAAC,EAAEJ,IAAI,CAACH,OAAO,CAACK,KAAK,CAACE,CAAC,CAAC,CAAC,CAAC,CAAC;EACtE,IAAIJ,IAAI,CAACO,MAAM,EACXN,OAAO,CAACO,OAAO,CAACR,IAAI,CAACO,MAAM,CAAC;EAChC,IAAIP,IAAI,CAACS,OAAO,EACZR,OAAO,CAACS,QAAQ,GAAGV,IAAI,CAACS,OAAO;EACnCR,OAAO,CAACU,OAAO,GAAGX,IAAI,CAACW,OAAO;EAC9BV,OAAO,CAACW,eAAe,GAAG,QAAQ,CAAC,CAAE;EACrC,OAAOX,OAAO;AAClB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAlB,OAAO,CAACG,SAAS,CAAC2B,MAAM,GAAG,SAASA,MAAMA,CAACC,aAAa,EAAE;EACtD,IAAIC,SAAS,GAAG/B,SAAS,CAACE,SAAS,CAAC2B,MAAM,CAACjB,IAAI,CAAC,IAAI,EAAEkB,aAAa,CAAC;EACpE,IAAIE,YAAY,GAAGF,aAAa,GAAGG,OAAO,CAACH,aAAa,CAACE,YAAY,CAAC,GAAG,KAAK;EAC9E,OAAOxB,IAAI,CAAC0B,QAAQ,CAAC,CACjB,SAAS,EAAG,IAAI,CAACC,cAAc,CAAC,CAAC,EACjC,SAAS,EAAGJ,SAAS,IAAIA,SAAS,CAACpB,OAAO,IAAIyB,SAAS,EACvD,SAAS,EAAGpC,SAAS,CAACqC,WAAW,CAAC,IAAI,CAACC,YAAY,EAAER,aAAa,CAAC,IAAI,0BAA2B,CAAC,CAAC,EACpG,QAAQ,EAAIC,SAAS,IAAIA,SAAS,CAACR,MAAM,IAAIa,SAAS,EACtD,SAAS,EAAGJ,YAAY,GAAG,IAAI,CAACL,OAAO,GAAGS,SAAS,CACtD,CAAC;AACN,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAjC,MAAM,CAACoC,cAAc,CAACxC,OAAO,CAACG,SAAS,EAAE,cAAc,EAAE;EACrDsC,GAAG,EAAE,SAAAA,CAAA,EAAW;IACZ,OAAO,IAAI,CAAC1B,aAAa,KAAK,IAAI,CAACA,aAAa,GAAGN,IAAI,CAACiC,OAAO,CAAC,IAAI,CAAC5B,OAAO,CAAC,CAAC;EAClF;AACJ,CAAC,CAAC;AAEF,SAAS6B,UAAUA,CAACzB,OAAO,EAAE;EACzBA,OAAO,CAACH,aAAa,GAAG,IAAI;EAC5B,OAAOG,OAAO;AAClB;;AAEA;AACA;AACA;AACAlB,OAAO,CAACG,SAAS,CAACsC,GAAG,GAAG,SAASA,GAAGA,CAAC9B,IAAI,EAAE;EACvC,OAAO,IAAI,CAACG,OAAO,CAACH,IAAI,CAAC,IAClBV,SAAS,CAACE,SAAS,CAACsC,GAAG,CAAC5B,IAAI,CAAC,IAAI,EAAEF,IAAI,CAAC;AACnD,CAAC;;AAED;AACA;AACA;AACAX,OAAO,CAACG,SAAS,CAACyC,UAAU,GAAG,SAASA,UAAUA,CAAA,EAAG;EACjD,IAAI,CAAC,IAAI,CAACC,sBAAsB,EAAE,OAAO,IAAI;EAE7C5C,SAAS,CAACE,SAAS,CAAC2C,OAAO,CAACjC,IAAI,CAAC,IAAI,CAAC;EACtC,IAAIC,OAAO,GAAG,IAAI,CAACyB,YAAY;EAC/B,KAAK,IAAIlB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,OAAO,CAACQ,MAAM,EAAE,EAAED,CAAC,EACnCP,OAAO,CAACO,CAAC,CAAC,CAACyB,OAAO,CAAC,CAAC;EACxB,OAAO,IAAI;AACf,CAAC;;AAED;AACA;AACA;AACA9C,OAAO,CAACG,SAAS,CAAC4C,yBAAyB,GAAG,SAASA,yBAAyBA,CAACrB,OAAO,EAAE;EACtF,IAAI,CAAC,IAAI,CAACsB,gCAAgC,EAAE,OAAO,IAAI;EAEvDtB,OAAO,GAAG,IAAI,CAACC,QAAQ,IAAID,OAAO;EAElCzB,SAAS,CAACE,SAAS,CAAC4C,yBAAyB,CAAClC,IAAI,CAAC,IAAI,EAAEa,OAAO,CAAC;EACjE,IAAI,CAACa,YAAY,CAACU,OAAO,CAACC,MAAM,IAAI;IAChCA,MAAM,CAACH,yBAAyB,CAACrB,OAAO,CAAC;EAC7C,CAAC,CAAC;EACF,OAAO,IAAI;AACf,CAAC;;AAED;AACA;AACA;AACA1B,OAAO,CAACG,SAAS,CAACoB,GAAG,GAAG,SAASA,GAAGA,CAAC4B,MAAM,EAAE;EAEzC;EACA,IAAI,IAAI,CAACV,GAAG,CAACU,MAAM,CAACxC,IAAI,CAAC,EACrB,MAAMyC,KAAK,CAAC,kBAAkB,GAAGD,MAAM,CAACxC,IAAI,GAAG,OAAO,GAAG,IAAI,CAAC;EAElE,IAAIwC,MAAM,YAAY3C,MAAM,EAAE;IAC1B,IAAI,CAACM,OAAO,CAACqC,MAAM,CAACxC,IAAI,CAAC,GAAGwC,MAAM;IAClCA,MAAM,CAACE,MAAM,GAAG,IAAI;IACpB,OAAOV,UAAU,CAAC,IAAI,CAAC;EAC3B;EACA,OAAO1C,SAAS,CAACE,SAAS,CAACoB,GAAG,CAACV,IAAI,CAAC,IAAI,EAAEsC,MAAM,CAAC;AACrD,CAAC;;AAED;AACA;AACA;AACAnD,OAAO,CAACG,SAAS,CAACmD,MAAM,GAAG,SAASA,MAAMA,CAACH,MAAM,EAAE;EAC/C,IAAIA,MAAM,YAAY3C,MAAM,EAAE;IAE1B;IACA,IAAI,IAAI,CAACM,OAAO,CAACqC,MAAM,CAACxC,IAAI,CAAC,KAAKwC,MAAM,EACpC,MAAMC,KAAK,CAACD,MAAM,GAAG,sBAAsB,GAAG,IAAI,CAAC;IAEvD,OAAO,IAAI,CAACrC,OAAO,CAACqC,MAAM,CAACxC,IAAI,CAAC;IAChCwC,MAAM,CAACE,MAAM,GAAG,IAAI;IACpB,OAAOV,UAAU,CAAC,IAAI,CAAC;EAC3B;EACA,OAAO1C,SAAS,CAACE,SAAS,CAACmD,MAAM,CAACzC,IAAI,CAAC,IAAI,EAAEsC,MAAM,CAAC;AACxD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAnD,OAAO,CAACG,SAAS,CAACE,MAAM,GAAG,SAASA,MAAMA,CAACkD,OAAO,EAAEC,gBAAgB,EAAEC,iBAAiB,EAAE;EACrF,IAAIC,UAAU,GAAG,IAAIhD,GAAG,CAACV,OAAO,CAACuD,OAAO,EAAEC,gBAAgB,EAAEC,iBAAiB,CAAC;EAC9E,KAAK,IAAIpC,CAAC,GAAG,CAAC,EAAE6B,MAAM,EAAE7B,CAAC,GAAG,iBAAkB,IAAI,CAACkB,YAAY,CAACjB,MAAM,EAAE,EAAED,CAAC,EAAE;IACzE,IAAIsC,UAAU,GAAGlD,IAAI,CAACmD,OAAO,CAAC,CAACV,MAAM,GAAG,IAAI,CAACnC,aAAa,CAACM,CAAC,CAAC,EAAEyB,OAAO,CAAC,CAAC,CAACnC,IAAI,CAAC,CAACkD,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;IACtGH,UAAU,CAACC,UAAU,CAAC,GAAGlD,IAAI,CAACqD,OAAO,CAAC,CAAC,GAAG,EAAC,GAAG,CAAC,EAAErD,IAAI,CAACsD,UAAU,CAACJ,UAAU,CAAC,GAAGA,UAAU,GAAG,GAAG,GAAGA,UAAU,CAAC,CAAC,gCAAgC,CAAC,CAAC;MAC5IK,CAAC,EAAEd,MAAM;MACTe,CAAC,EAAEf,MAAM,CAACgB,mBAAmB,CAACC,IAAI;MAClCC,CAAC,EAAElB,MAAM,CAACmB,oBAAoB,CAACF;IACnC,CAAC,CAAC;EACN;EACA,OAAOT,UAAU;AACrB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}