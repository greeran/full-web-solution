{"ast":null,"code":"import * as protobuf from 'protobufjs';\n\n// Load the protobuf schema\nconst protoPath = '/sensor.proto';\nclass ProtobufService {\n  constructor() {\n    this.root = null;\n    this.messageTypes = {};\n  }\n  async initialize() {\n    try {\n      // Load the protobuf schema\n      this.root = await protobuf.load(protoPath);\n\n      // Get message types\n      this.messageTypes.TemperatureData = this.root.lookupType('sensor.TemperatureData');\n      this.messageTypes.CompassData = this.root.lookupType('sensor.CompassData');\n      this.messageTypes.GpsPositionData = this.root.lookupType('sensor.GpsPositionData');\n      this.messageTypes.SensorData = this.root.lookupType('sensor.SensorData');\n      this.messageTypes.StatusMessage = this.root.lookupType('sensor.StatusMessage');\n      console.log('‚úÖ Protobuf service initialized successfully');\n    } catch (error) {\n      console.error('‚ùå Failed to initialize protobuf service:', error);\n      throw error;\n    }\n  }\n  parseMessage(topic, message) {\n    try {\n      let messageType;\n\n      // Determine message type based on topic\n      switch (topic) {\n        case 'sensor/temperature':\n          messageType = this.messageTypes.TemperatureData;\n          break;\n        case 'sensor/compass':\n          messageType = this.messageTypes.CompassData;\n          break;\n        case 'sensor/gps':\n          messageType = this.messageTypes.GpsPositionData;\n          break;\n        case 'sensor/all':\n          messageType = this.messageTypes.SensorData;\n          break;\n        case 'sensor/status':\n          messageType = this.messageTypes.StatusMessage;\n          break;\n        default:\n          console.log(`Unknown topic: ${topic}`);\n          return null;\n      }\n      if (!messageType) {\n        console.error(`No message type found for topic: ${topic}`);\n        return null;\n      }\n\n      // Decode the protobuf message\n      const decoded = messageType.decode(message);\n      const object = messageType.toObject(decoded, {\n        longs: String,\n        enums: String,\n        bytes: String\n      });\n      console.log(`üì¶ Parsed protobuf message for ${topic}:`, object);\n      return object;\n    } catch (error) {\n      console.error(`‚ùå Failed to parse protobuf message for ${topic}:`, error);\n      return null;\n    }\n  }\n\n  // Helper method to convert timestamp to ISO string\n  timestampToISO(timestamp) {\n    const ts = typeof timestamp === 'string' ? parseInt(timestamp) : timestamp;\n    return new Date(ts).toISOString();\n  }\n\n  // Format sensor data for display\n  formatSensorData(topic, parsedData) {\n    var _parsedData$temperatu, _parsedData$heading, _gps$latitude, _gps$longitude;\n    switch (topic) {\n      case 'sensor/temperature':\n        return {\n          value: ((_parsedData$temperatu = parsedData.temperature) === null || _parsedData$temperatu === void 0 ? void 0 : _parsedData$temperatu.toString()) || 'N/A',\n          unit: parsedData.unit || '¬∞C',\n          timestamp: this.timestampToISO(parsedData.timestamp),\n          description: 'CPU Temperature'\n        };\n      case 'sensor/compass':\n        return {\n          value: ((_parsedData$heading = parsedData.heading) === null || _parsedData$heading === void 0 ? void 0 : _parsedData$heading.toString()) || 'N/A',\n          unit: parsedData.unit || 'degrees',\n          timestamp: this.timestampToISO(parsedData.timestamp),\n          description: 'Compass Heading'\n        };\n      case 'sensor/gps':\n        const gps = parsedData.position || parsedData;\n        return {\n          value: `${((_gps$latitude = gps.latitude) === null || _gps$latitude === void 0 ? void 0 : _gps$latitude.toFixed(6)) || 'N/A'}, ${((_gps$longitude = gps.longitude) === null || _gps$longitude === void 0 ? void 0 : _gps$longitude.toFixed(6)) || 'N/A'}`,\n          unit: parsedData.unit || 'lat/lon',\n          timestamp: this.timestampToISO(parsedData.timestamp),\n          description: 'GPS Location'\n        };\n      case 'sensor/status':\n        return {\n          value: parsedData.status || 'unknown',\n          unit: '',\n          timestamp: this.timestampToISO(parsedData.timestamp),\n          description: 'Sensor Status'\n        };\n      default:\n        return {\n          value: 'Unknown',\n          unit: '',\n          timestamp: new Date().toISOString(),\n          description: 'Unknown Sensor'\n        };\n    }\n  }\n}\nexport const protobufService = new ProtobufService();","map":{"version":3,"names":["protobuf","protoPath","ProtobufService","constructor","root","messageTypes","initialize","load","TemperatureData","lookupType","CompassData","GpsPositionData","SensorData","StatusMessage","console","log","error","parseMessage","topic","message","messageType","decoded","decode","object","toObject","longs","String","enums","bytes","timestampToISO","timestamp","ts","parseInt","Date","toISOString","formatSensorData","parsedData","_parsedData$temperatu","_parsedData$heading","_gps$latitude","_gps$longitude","value","temperature","toString","unit","description","heading","gps","position","latitude","toFixed","longitude","status","protobufService"],"sources":["/home/linux-1/projects/web-server-app/imx8mp-web-client/src/services/protobufService.ts"],"sourcesContent":["import * as protobuf from 'protobufjs';\n\n// Load the protobuf schema\nconst protoPath = '/sensor.proto';\n\nclass ProtobufService {\n  private root: protobuf.Root | null = null;\n  private messageTypes: {\n    TemperatureData?: protobuf.Type;\n    CompassData?: protobuf.Type;\n    GpsPositionData?: protobuf.Type;\n    SensorData?: protobuf.Type;\n    StatusMessage?: protobuf.Type;\n  } = {};\n\n  async initialize(): Promise<void> {\n    try {\n      // Load the protobuf schema\n      this.root = await protobuf.load(protoPath);\n      \n      // Get message types\n      this.messageTypes.TemperatureData = this.root.lookupType('sensor.TemperatureData');\n      this.messageTypes.CompassData = this.root.lookupType('sensor.CompassData');\n      this.messageTypes.GpsPositionData = this.root.lookupType('sensor.GpsPositionData');\n      this.messageTypes.SensorData = this.root.lookupType('sensor.SensorData');\n      this.messageTypes.StatusMessage = this.root.lookupType('sensor.StatusMessage');\n      \n      console.log('‚úÖ Protobuf service initialized successfully');\n    } catch (error) {\n      console.error('‚ùå Failed to initialize protobuf service:', error);\n      throw error;\n    }\n  }\n\n  parseMessage(topic: string, message: Buffer): any {\n    try {\n      let messageType: protobuf.Type | undefined;\n      \n      // Determine message type based on topic\n      switch (topic) {\n        case 'sensor/temperature':\n          messageType = this.messageTypes.TemperatureData;\n          break;\n        case 'sensor/compass':\n          messageType = this.messageTypes.CompassData;\n          break;\n        case 'sensor/gps':\n          messageType = this.messageTypes.GpsPositionData;\n          break;\n        case 'sensor/all':\n          messageType = this.messageTypes.SensorData;\n          break;\n        case 'sensor/status':\n          messageType = this.messageTypes.StatusMessage;\n          break;\n        default:\n          console.log(`Unknown topic: ${topic}`);\n          return null;\n      }\n\n      if (!messageType) {\n        console.error(`No message type found for topic: ${topic}`);\n        return null;\n      }\n\n      // Decode the protobuf message\n      const decoded = messageType.decode(message);\n      const object = messageType.toObject(decoded, {\n        longs: String,\n        enums: String,\n        bytes: String,\n      });\n\n      console.log(`üì¶ Parsed protobuf message for ${topic}:`, object);\n      return object;\n    } catch (error) {\n      console.error(`‚ùå Failed to parse protobuf message for ${topic}:`, error);\n      return null;\n    }\n  }\n\n  // Helper method to convert timestamp to ISO string\n  timestampToISO(timestamp: string | number): string {\n    const ts = typeof timestamp === 'string' ? parseInt(timestamp) : timestamp;\n    return new Date(ts).toISOString();\n  }\n\n  // Format sensor data for display\n  formatSensorData(topic: string, parsedData: any): any {\n    switch (topic) {\n      case 'sensor/temperature':\n        return {\n          value: parsedData.temperature?.toString() || 'N/A',\n          unit: parsedData.unit || '¬∞C',\n          timestamp: this.timestampToISO(parsedData.timestamp),\n          description: 'CPU Temperature'\n        };\n      \n      case 'sensor/compass':\n        return {\n          value: parsedData.heading?.toString() || 'N/A',\n          unit: parsedData.unit || 'degrees',\n          timestamp: this.timestampToISO(parsedData.timestamp),\n          description: 'Compass Heading'\n        };\n      \n      case 'sensor/gps':\n        const gps = parsedData.position || parsedData;\n        return {\n          value: `${gps.latitude?.toFixed(6) || 'N/A'}, ${gps.longitude?.toFixed(6) || 'N/A'}`,\n          unit: parsedData.unit || 'lat/lon',\n          timestamp: this.timestampToISO(parsedData.timestamp),\n          description: 'GPS Location'\n        };\n      \n      case 'sensor/status':\n        return {\n          value: parsedData.status || 'unknown',\n          unit: '',\n          timestamp: this.timestampToISO(parsedData.timestamp),\n          description: 'Sensor Status'\n        };\n      \n      default:\n        return {\n          value: 'Unknown',\n          unit: '',\n          timestamp: new Date().toISOString(),\n          description: 'Unknown Sensor'\n        };\n    }\n  }\n}\n\nexport const protobufService = new ProtobufService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}